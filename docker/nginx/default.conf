
# Redirection HTTP vers HTTPS
server {
    listen 80;
    server_name localhost;
    return 301 https://$host$request_uri;
}

# Serveur mappé HTTPS
server {
    listen 443 ssl;
    server_name localhost;

    # SSL
    ssl_certificate /etc/nginx/certs/nginx.crt;
    ssl_certificate_key /etc/nginx/certs/nginx.key;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers HIGH:!aNULL:!MD5;


    # -------------------------
    # FRONTEND (React buildé)
    # -------------------------
     # le dossier où est monté le build React
    root /usr/share/nginx/html;  
    # toutes les requêtes pas pour l'api. le try file : redirection si fichier introuvable
    location / {
        index index.html;
        try_files $uri /index.html;
    }

    # -------------------------
    # BACKEND (Symfony API)
    # -------------------------
    # Requetes redirigées vers php-fpm via index.php
    location /api {
         # le dossier où est monté le build React
        root /var/www/html/public;    
        try_files $uri /index.php$is_args$query_string;
    }
    location /media/ {
        alias /var/www/html/public/media/;
        access_log off;
        expires 30d;
    }
    location ~ ^/index\.php(/|$) {
        fastcgi_pass woofwalks_php-fpm:9000;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME /var/www/html/public$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT /var/www/html/public;
        internal;
    }


    # -------------------------
    # Sécurité
    # -------------------------
    #Ajout en têtes http : Empêche le navigateur de "deviner" le type de contenu d'un fichier (par exemple, d'interpréter un fichier .txt comme un script JavaScript)
    add_header X-Content-Type-Options nosniff always;
    #Ajoute l'en-tête Strict-Transport-Security :Force le navigateur à ne communiquer avec votre site qu'en HTTPS pendant 1 an en incluant les sous domaine
    #-> défense contre attaques de l'homme au milieu : attaquand se place entre utilisateur et site web pour écouter les échanges ou modifier des données...
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    #Active le filtre XSS intégré de certains navigateurs : bloque execution de XSS si navigateur détecte
    add_header X-XSS-Protection "1; mode=block" always;
    #Ajoute l'en-tête de Content Security Policy : liste d'autorisation qui dit au navigateur quelles sources sont fiables pour les scripts, les styles, les images -> défense contre XSS
    add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self' https://fonts.googleapis.com; img-src 'self' data:; font-src 'self' https://fonts.gstatic.com; connect-src 'self' https://api-adresse.data.gouv.fr; media-src 'self'; object-src 'none'; frame-ancestors 'none'; worker-src 'self'; manifest-src 'self'; form-action 'self';" always;
    #Contrôle la mise en cache de la réponse par le navigateur : empêche stockage des infos sensibles dans le cache
    add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0" always;
    #Cache l'en-tête X-Powered-By de la réponse : empêche affichage de la version php
    fastcgi_hide_header X-Powered-By;
    # Masque la version de Nginx 
    server_tokens off;
    error_log /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
}
